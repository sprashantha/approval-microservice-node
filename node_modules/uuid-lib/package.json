{
  "name": "uuid-lib",
  "description": "A UUID generator and validator.",
  "version": "0.0.6",
  "homepage": "http://github.com/dandean/uuid-lib",
  "author": {
    "name": "Dan Dean",
    "email": "me@dandean.com",
    "url": "http://dandean.com"
  },
  "contributors": [],
  "repository": {
    "type": "git",
    "url": "http://github.com/dandean/uuid-lib.git"
  },
  "bugs": {
    "url": "http://github.com/dandean/uuid-lib/issues"
  },
  "main": "uuid-lib",
  "engines": {
    "node": ">=0.2.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/dandean/uuid-lib/raw/master/LICENSE"
    }
  ],
  "readme": "# Uuid lets you generate and validate Universally Unique Identifiers.\n\nIn its simplest form, Uuid lets you generate raw UUID formatted strings:\n\n    Uuid.raw();\n    // -> '6fdf6ffced7794fa407ea7b86ed9e59d'\n\nBut it has a more robust API which lets you work with UUID's as objects. Let's\ngenerate a new Uuid instance.\n\n    var uuid = Uuid.create();\n\nWe've now got an object which we can work with programmatically. Lets check the\nvalidity of our uuid using the built-in validator:\n\n    Uuid.isUuid(uuid);\n    // -> true\n    \n    Uuid.value;\n    // -> '6fdf6ffced7794fa407ea7b86ed9e59d'\n\nA handy bit of functionality is that its `toString` method returns the string\nvalue, so you can do handy things like this:\n\n    var itemUrl = \"http://whatever.com/items/\" + uuid;\n    // -> 'http://whatever.com/items/6fdf6ffced7794fa407ea7b86ed9e59d'\n    \nIf you need a placehold Uuid, or a value to represent a non-uuid, use the static\n`EMPTY` property:\n\n    Uuid.EMPTY;\n    // -> '00000000000000000000000000000000'\n\nOnce you have a `Uuid` object, you can't change its value (thanks ES5!):\n\n    uuid.value = \"go suck it, uuid!\"\n    uuid.value;\n    // -> '6fdf6ffced7794fa407ea7b86ed9e59d'\n\nTo instantiate a Uuid object using an existing UUID string, use the constructor:\n\n    var uuid = new Uuid('6fdf6ffced7794fa407ea7b86ed9e59d');\n\nYou can check the equality of two different Uuid objects using the `equals`\ninstance method.\n\nCompare a Uuid object to a UUID string:\n\n    uuid.equals('6fdf6ffced7794fa407ea7b86ed9e59d');\n    // -> true\n\nCompare two Uuid objects:\n    \n    uuid.equals(new Uuid('6fdf6ffced7794fa407ea7b86ed9e59d'));\n    // -> true\n\n## Installation\n\nYou can use npm to install uuid: `npm install uuid`\n\n## But what if I need a GUID, not a UUID?\n\nThere's also a [Guid](https://github.com/dandean/guid) library which has the\n**exact** same functionality, but for GUID's:\n[https://github.com/dandean/guid](https://github.com/dandean/guid)\n\n",
  "readmeFilename": "README.md",
  "_id": "uuid-lib@0.0.6",
  "dist": {
    "shasum": "0b8b59ae7fa000d16ddf4f14d1e5d7653122419c"
  },
  "deprecated": "Please use node-uuid instead. It is much better.",
  "_from": "uuid-lib@",
  "_resolved": "https://registry.npmjs.org/uuid-lib/-/uuid-lib@0.0.6.tgz"
}
